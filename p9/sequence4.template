#include <cassert> // Provides assert()
#include <cstdlib> // Provides NULL and size_t
#include "node2.h" // Provides linked list toolkit
#include "sequence4.h"

namespace main_savitch_6B {
    // BIG THREE: CONSTRUCTORS, DECONSTRUCTOR, ASSIGNMENT OPERATOR
    template <class Item>
    sequence<Item>::sequence() {
        head = tail = cursor = precursor = NULL;
        many_nodes = 0;
    }

    template <class Item>
    sequence<Item>::sequence(const sequence& source) {
        main_savitch_6B::list_copy(source.head, head, tail);
        many_nodes = source.many_nodes;
        /* Copy cursor locations */
        start();
        for (node<Item>* i = source.head; i != NULL && i != source.cursor; i = i->link()) advance();
    }

    template <class Item>
    sequence<Item>::~sequence() {
        main_savitch_6B::list_clear(head);
    }

    template <class Item>
    void sequence<Item>::operator =(const sequence& source) {
        /* Check for self-assignment, clear values before copying */
        if (this == &source) return;
        main_savitch_6B::list_clear(head);
        main_savitch_6B::list_copy(source.head, head, tail);
        many_nodes = source.many_nodes;
        /* Copy cursor locations */
        start();
        for (node<Item>* i = source.head; i != NULL && i != source.cursor; i = i->link()) advance();
    }

    // MODIFICATION MEMBER FUNCTIONS
    template <class Item>
    void sequence<Item>::start() {
        precursor = NULL;
        cursor = head;
    }

    template <class Item>
    void sequence<Item>::advance() {
        assert(is_item());
        precursor = cursor;
        cursor = cursor->link();
    }

    template <class Item>
    void sequence<Item>::insert(const value_type& entry) {
        /* If empty, set the tail */
        if (many_nodes == 0) {
            precursor = NULL;
            main_savitch_6B::list_head_insert(head, entry);
            cursor = head;
            tail = head; /* Set tail */
        } 
        /* If no item or cursor points to the first item, insert at head */
        else if (is_item() == false || cursor == head) {
            main_savitch_6B::list_head_insert(head, entry);
            precursor = NULL;
            cursor = head;
        }
        /* Inserts at the middle of the list */
        else {
            main_savitch_6B::list_insert(precursor, entry);
            cursor = precursor->link();
        }
        ++many_nodes;
    }

    template <class Item>
    void sequence<Item>::attach(const value_type& entry) {
        /* If empty, set tail */
        if (many_nodes == 0) {
            precursor = head;
            main_savitch_6B::list_head_insert(head, entry);
            cursor = head;
            tail = head; /* Set tail */
        } 
        /* If no item or cursor points to the last item, insert at tail */
        else if (is_item() == false || cursor == tail) {
            precursor = tail;
            main_savitch_6B::list_insert(tail, entry);
            tail = tail->link(); /* Update tail */
            cursor = tail;
        } 
        /* Attaches at the middle of the list */
        else {
            precursor = cursor;
            main_savitch_6B::list_insert(cursor, entry);
            cursor = cursor->link();
        }
        ++many_nodes;
    }

    template <class Item>
    void sequence<Item>::remove_current() {
        assert(is_item());
        /* If just one node, remove at head */
        if (many_nodes == 1) {
            main_savitch_6B::list_head_remove(head);
            precursor = cursor = tail = NULL;
        }
        /* If first item, remove at head, set cursor to head */
        else if (cursor == head) {
            precursor = NULL;
            main_savitch_6B::list_head_remove(head);
            cursor = head;
        } 
        /* If last item, remove at tail, set cursor as NULL, update tail */
        else if (cursor == tail) {
            tail = precursor; /* Update tail */
            main_savitch_6B::list_remove(tail);
            cursor = NULL;
        }
        /* Remove at middle */
        else {
            cursor = cursor->link();
            main_savitch_6B::list_remove(precursor);
        }
        --many_nodes;
    }
}